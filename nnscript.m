% Solve an Input-Output Fitting problem with a Neural Network
% Script generated by NFTOOL
% Created Fri Aug 30 15:18:56 EDT 2013
%
% This script assumes these variables are defined:
%
% [P1, PS] = mapminmax(inputs);
% [T1, TS] = mapminmax(targets);
% 
% inputs = P1; targets = T1;

% Create a Fitting Network
hiddenLayerSize = n_nodes;
net = fitnet(hiddenLayerSize);
% net = init(net);
% net.performFcn = 'sse';

% Setup Division of Data for Training, Validation, Testing
net.divideParam.trainRatio = 70/100;
net.divideParam.valRatio = 15/100;
net.divideParam.testRatio = 15/100;
% net.divideFcn = 'divideind';
% net.divideParam.trainInd = 1:100;
% net.divideParam.testInd = 101:132;
net.TrainFcn = 'trainbr';


% Train the Network
for i=1:n_times
    fprintf('\n *training iteration %u ',i);
    [net,tr] = train(net,inputs,targets);
end
fprintf('\n');

% Test the Network
outputs = net(inputs);
% outputs = mapminmax('reverse',outputs1,TS);
errors = gsubtract(targets,outputs);
performance = perform(net,targets,outputs);

% View the Network
%view(net)

% Plots
% Uncomment these lines to enable various plots.
%figure, plotperform(tr)
%figure, plottrainstate(tr)
%figure, plotfit(net,inputs,targets)
%figure, plotregression(targets,outputs)
%figure, ploterrhist(errors)
